/* The first three lines from Definition 13 of section 3.
   We don't write subscripts; for instance, we represent
   $g_L$ as gL.
*/

S: (1.0/(2.0*sqrt(2.0))) / (asinh(1.0/(2.0*sqrt(2.0))));    K: 2.0*sqrt(3.0)/S;

h: (1+z^2) / (z*(1-z^2));   gU: (1+z^2) / (2*z^3);    gL: (1+z^2)^2 / (2*z^3*(3-z^2));

H: h/K;                     GU: gU/K;                 GL: gL/K;

/* The definitions of FU and FL require the derivatives
   of h and H. Instead of h' and H', we
   denote these as hp and Hp.
*/	  
hp: factor(expand(derivative(h,z)));
Hp: factor(expand(derivative(H,z)));

FU: factor(expand( (Hp/(H + GU)) - 1/(1-z) ));

/* We write $\Phi_U$ as PHU; likewise, $\Phi_L$ is PHL.
   We define these in Maxima not as expressions in z
   as in the previous definitions, but as functions.

   Surprisingly these functions are elementary; we do
   not pursue this here, and instead content ourselves
   with approximate definitions by adaptive quadrature.

   The routine quad_qag is described in section 19.3
   of the Maxima reference manual. It does not return
   rigorous bounds, but only an approximation of the
   error in the given estimate. So this code will only
   strongly suggest the numbers given in the paper are
   correct. We give a formal proof that the numbers are
   correct using the Coq proof assistant in Dehn.v .
*/
FUw : subst(w,z,FU);
PHU(z):= quad_qag(FUw, w, 1, z, 1)[1];

FL : factor(expand( Hp/(H - GL) - 1/(1-z) ));
FLw : subst(w,z,FL);
PHL(z):= quad_qag(FLw, w, 1, z, 1)[1];

fU(z):= K*(1-z)*exp(-PHU(z));

fL(z):= K*(1-z)*exp(-PHL(z));

LBint: subst(w,z,factor(expand(Hp/(H*(H-GL)) )));

LB(z):= (1/4)*quad_qag(LBint,w,z,1,1)[1];

UBint: subst(w,z,factor(expand(Hp/(H*(H+GU)) )));

UB(z):= (1/4)*quad_qag(UBint,w,z,1,1)[1];

/* The find_root routine is also a numerical routine,
   but yields rigorous estimates with little additional work.
*/
   
deltaVUpperBound: LB(find_root(fL(x)-fU(sqrt(1/3)), x, sqrt(1/3),1));

Theta:deltaVUpperBound;

zULowerBound: find_root(UB(x)-Theta, x, sqrt(1/3), 1);

zUlb: zULowerBound;

lcLowerBound: sqrt(float((2*%pi)^2/fU(zUlb)));

/* The following is the code one can use to verify that
   the monotonicities given are correct. The routine
   real_roots is rigorous, using the method
   of Sturm chains to isolate roots, and then using
   the method of bisection to isolate the roots
   to the desired precision.
*/

fU3fac: factor(expand( (1-z)*(FU^2-derivative(FU,z)) + 2*FU ));

realroots(part(fU3fac,1,1), 10^-6);

fL3fac: factor(expand( (1-z)*(FL^2-derivative(FL,z)) + 2*FL ));

realroots(part(fL3fac,1,1), 10^-6);

tL: factor(expand( hp/(h * (h - gL)) ));

tU: factor(expand( hp/(h * (h + gU)) ));
