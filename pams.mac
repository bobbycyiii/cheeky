/* The first three lines from Definition 13 of section 3.
   We don't write subscripts; for instance, we represent
   $g_L$ as gL.
*/

S: (1/(2*sqrt(2))) / (asinh(1/(2*sqrt(2))));    K: 2*sqrt(3)/S;

h: (1+z^2) / (z*(1-z^2));   gU: (1+z^2) / (2*z^3);    gL: (1+z^2)^2 / (2*z^3*(3-z^2));

H: h/K;                     GU: gU/K;                 GL: gL/K;

/* The definitions of FU and FL require the derivatives
   of h and H. Instead of h' and H', we
   denote these as hp and Hp.
*/	  
hp: factor(expand(derivative(h,z)));
Hp: factor(expand(derivative(H,z)));

FU: factor(expand( (Hp/(H + GU)) - 1/(1-z) ));

/* We write $\Phi_U$ as PHU; likewise, $\Phi_L$ is PHL.
   We define these in Maxima not as expressions in z
   as in the previous definitions, but as functions.

   Surprisingly these functions are elementary; we do
   not pursue this here, and instead content ourselves
   with approximate definitions by adaptive quadrature.

   The routine quad_qag is described in section 19.3
   of the Maxima reference manual. It does not return
   rigorous bounds, but only an approximation of the
   error in the given estimate. So this code will only
   strongly suggest the numbers given in the paper are
   correct. We will give a formal proof that the numbers
   are correct using the Coq proof assistant in Dehn.v .

   The suggestion is strong because the functions are
   extremely well-behaved on the given domain [1/sqrt(3),1].
*/

FUw : subst(w,z,FU);
PHU(z):= quad_qag(FUw, w, 1, z, 1)[1];

FL : factor(expand( Hp/(H - GL) - 1/(1-z) ));
FLw : subst(w,z,FL);
PHL(z):= quad_qag(FLw, w, 1, z, 1)[1];

fU(z):= K*(1-z)*exp(-PHU(z));

fL(z):= K*(1-z)*exp(-PHL(z));

LBint: subst(w,z,factor(expand(Hp/(H*(H-GL)) )));

LB(z):= (1/4)*quad_qag(LBint,w,z,1,1)[1];

UBint: subst(w,z,factor(expand(Hp/(H*(H+GU)) )));

UB(z):= (1/4)*quad_qag(UBint,w,z,1,1)[1];

/* We chose this order of definition because it accords
   with the paper's order; and the paper's order looks nice.
   However, it doesn't make clear which of the above functions
   are defined rigorously, and which are only estimated. The
   functions which are defined rigorously are those which
   are independent of numerical integration. Among these are
   FU and FL. We note that since h, hp, gL, and gU differ by
   the constant factor K from H, Hp, GL, and GU, we can redefine
   FU and FL as follows. This manifests them as rational functions
   over the rationals. So these are rigorous definitions.
*/

FU: factor(expand( (hp/(h + gU)) - 1/(1-z) ));
FL: factor(expand( (hp/(h - gL)) - 1/(1-z) ));

/* We can make similar simplifications for the integrands
   in Hodgson and Kerckhoff's main theorem. The integrand
   of LB is K*hp/(h*(h-gL)); likewise, the integrand for
   UB is K*hp/(h*(h+gU)). Dropping the K does not change
   the sign of LB or UB, nor does it change which one is
   bigger than the other.
*/

LBintNoK: subst(w,z,factor(expand(hp/(h*(h-gL)))));
UBintNoK: subst(w,z,factor(expand(hp/(h*(h+gU)))));
LBUBdiff: factor(expand(LBintNoK-UBintNoK));

/* The following code is rigorous, but does not allow us to
   reach the desired conclusion without rigorous bounds on xi,
   which, later, we only approximate.
   
   The routine real_roots is rigorous, using the method
   of Sturm chains to isolate real roots of polynomials,
   and then using the method of bisection to isolate the roots
   to the desired precision. (See the Maxima Reference Manual,
   section 20, on equations.) 

   fu3fac is an expression with several factors. We use the
   part function of Maxima to pick out the factor of interest to
   us, namely the numerator, without the factor of 2. We do the
   same for the other functions.
*/

fU3fac: factor(expand( (1-z)*(FU^2-derivative(FU,z)) + 2*FU ));

fU3facRoots: realroots(part(fU3fac,1,1), 10^-6);

fL3fac: factor(expand( (1-z)*(FL^2-derivative(FL,z)) + 2*FL ));

fL3facRoots: realroots(part(fL3fac,1,1), 10^-6);

tL: subst(z,w,LBintNoK);

tLp: factor(expand(derivative(tL, z)));

pL: part(tLp, 1, 1, 5);

pLfacRoots: realroots(pL, 10^-6);

tU: subst(z,w,UBintNoK);

tUp: factor(expand(derivative(tU, z)));

pU: part(tUp, 1, 1, 3);

pUfacRoots: realroots(pU, 10^-6);

/* The above code gets rigorous estimates on the roots of the
   associated polynomials. However, without knowing rigorous
   bounds on xi, we cannot say whether or not the roots lie
   outside the given interval, as desired. This remains to be
   done in Coq. What follows are non-rigorous but strongly
   suggestive estimates that use non-rigorous numerical quadrature,
   and the (also non-rigorous) find_root routine.

   Crucially, we require that none of the roots of the above
   polynomials lie in [xi,1]. This is barely true; one of the roots
   of the polynomial used in getting nice bounds for fL is
   approximately 0.805, whereas xi is approximately 0.811.
*/

deltaVUpperBound: LB(find_root(fL(x)-fU(sqrt(1/3)), x, sqrt(1/3),1));

Theta:deltaVUpperBound;

zULowerBound: find_root(UB(x)-Theta, x, sqrt(1/3), 1);

zUlb: zULowerBound;

lcLowerBound: sqrt(float((2*%pi)^2/fU(zUlb)));

xi: find_root(LB(x)-Theta, x, sqrt(1/3), 1);

alpha: K*(1-xi)*exp(PHU(xi)-PHL(xi))/(2*%pi*Theta);

beta: (2*%pi)^2*Theta*exp(PHL(xi))/(K*(1-xi));

gamma: %pi^2*exp(PHU(xi));
